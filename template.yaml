AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template to update config recorder settings in child accounts created by ControlTower.'
Parameters:

  ExcludedAccounts:
    Description: This list should contain Management account, Log Archive and Audit accounts at the minimum
    Default: "['811538682820', '866232342806', '521968430494']"
    MaxLength: '2000'
    MinLength: '36'
    Type: String

  ConfigRecorderIncludedResourceTypes:
    Description: List of all resource types to be included from Config Recorder
    Default: "AWS::ACM::Certificate,AWS::ApiGateway::RestApi,AWS::ApiGateway::Stage,AWS::ApiGatewayV2::Api,AWS::ApiGatewayV2::Stage,AWS::AutoScaling::AutoScalingGroup,AWS::AutoScaling::LaunchConfiguration,AWS::AutoScaling::ScalingPolicy,AWS::AutoScaling::ScheduledAction,AWS::CloudFormation::Stack,AWS::CloudTrail::Trail,AWS::CloudWatch::Alarm,AWS::CodeBuild::Project,AWS::CodePipeline::Pipeline,AWS::Config::ResourceCompliance,AWS::DynamoDB::Table,AWS::EC2::CustomerGateway,AWS::EC2::EgressOnlyInternetGateway,AWS::EC2::EIP,AWS::EC2::FlowLog,AWS::EC2::Host,AWS::EC2::Instance,AWS::EC2::InternetGateway,AWS::EC2::NatGateway,AWS::EC2::NetworkAcl,AWS::EC2::NetworkInterface,AWS::EC2::RegisteredHAInstance,AWS::EC2::RouteTable,AWS::EC2::SecurityGroup,AWS::EC2::Subnet,AWS::EC2::VPC,AWS::EC2::VPCEndpoint,AWS::EC2::VPCEndpointService,AWS::EC2::VPCPeeringConnection,AWS::EC2::VPNConnection,AWS::EC2::VPNGateway,AWS::ElasticBeanstalk::Application,AWS::ElasticBeanstalk::ApplicationVersion,AWS::ElasticBeanstalk::Environment,AWS::ElasticLoadBalancing::LoadBalancer,AWS::ElasticLoadBalancingV2::LoadBalancer,AWS::Elasticsearch::Domain,AWS::KMS::Key,AWS::Lambda::Function,AWS::RDS::DBInstance,AWS::RDS::DBSecurityGroup,AWS::RDS::DBSnapshot,AWS::RDS::DBSubnetGroup,AWS::RDS::EventSubscription,AWS::SecretsManager::Secret,AWS::ServiceCatalog::CloudFormationProduct,AWS::ServiceCatalog::CloudFormationProvisionedProduct,AWS::ServiceCatalog::Portfolio,AWS::ShieldRegional::Protection,AWS::SNS::Topic,AWS::SQS::Queue,AWS::SSM::AssociationCompliance,AWS::SSM::ManagedInstanceInventory,AWS::SSM::PatchCompliance,AWS::WAFRegional::RateBasedRule,AWS::WAFRegional::Rule,AWS::WAFRegional::RuleGroup,AWS::WAFRegional::WebACL,AWS::WAFv2::IPSet,AWS::WAFv2::ManagedRuleSet,AWS::WAFv2::RegexPatternSet,AWS::WAFv2::RuleGroup,AWS::WAFv2::WebACL,AWS::XRay::EncryptionConfig"
    Type: String

  CloudFormationVersion:
    Type: String
    Default: 2

  LambdaZipsBucket:
    Type: String
    Default: "control-tower-config-recorder-customization"

Resources:

    ProducerLambda:
        Type: AWS::Lambda::Function
        DeletionPolicy: Retain
        Properties:
            #FunctionName: ct_configrecorder_override_producer_cf
            Code:
                S3Bucket: !Ref LambdaZipsBucket
                S3Key: ct-config-content/ct_configrecorder_override_producer.zip
            Handler: ct_configrecorder_override_producer.lambda_handler
            Role: !GetAtt ProducerLambdaExecutionRole.Arn
            Runtime: python3.10
            MemorySize: 128
            Timeout: 300
            Architectures:
                - x86_64
            ReservedConcurrentExecutions: 1
            Environment:
                Variables:
                    EXCLUDED_ACCOUNTS: !Ref ExcludedAccounts
                    LOG_LEVEL: INFO
                    SQS_URL: !Ref SQSConfigRecorder

    ProducerLambdaPermissions:                
      Type: AWS::Lambda::Permission
      DeletionPolicy: Retain
      Properties: 
        Action: 'lambda:InvokeFunction'
        FunctionName: !Ref ProducerLambda
        Principal: 'events.amazonaws.com'
        SourceArn: !GetAtt ProducerEventTrigger.Arn             
      
    ConsumerLambda:
        Type: AWS::Lambda::Function
        DeletionPolicy: Retain
        Properties:
            #FunctionName: ct_configrecorder_override_consumer_cf
            Code:
                S3Bucket: !Ref LambdaZipsBucket
                S3Key: ct-config-content/ct_configrecorder_override_consumer.zip
            Handler: ct_configrecorder_override_consumer.lambda_handler
            Role: !GetAtt ConsumerLambdaExecutionRole.Arn
            Runtime: python3.10
            MemorySize: 128
            Timeout: 180
            Architectures:
                - x86_64
            ReservedConcurrentExecutions: 10
            Environment:
                Variables:
                    LOG_LEVEL: INFO
                    CONFIG_RECORDER_INCLUDED_RESOURCE_LIST: !Ref ConfigRecorderIncludedResourceTypes

    ConsumerLambdaEventSourceMapping:
        Type: AWS::Lambda::EventSourceMapping
        DeletionPolicy: Retain
        Properties:
          BatchSize: 1
          Enabled: true
          EventSourceArn: !GetAtt SQSConfigRecorder.Arn
          FunctionName: !GetAtt ConsumerLambda.Arn                
    
    ProducerLambdaExecutionRole:
        Type: 'AWS::IAM::Role'
        DeletionPolicy: Retain
        Properties:
          ManagedPolicyArns:
            - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action:
                  - 'sts:AssumeRole'
          Path: /         
          Policies:
            - PolicyName: ct_cro_producer
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - cloudformation:ListStackInstances
                    Resource: !Sub 'arn:${AWS::Partition}:cloudformation:*:*:stackset/AWSControlTowerBP-BASELINE-CONFIG:*'
                  - Effect: Allow
                    Action:
                      - sqs:DeleteMessage
                      - sqs:ReceiveMessage
                      - sqs:SendMessage
                      - sqs:GetQueueAttributes
                    Resource: !GetAtt SQSConfigRecorder.Arn  
                    
    ConsumerLambdaExecutionRole:
        Type: 'AWS::IAM::Role'
        DeletionPolicy: Retain
        Properties:
          ManagedPolicyArns:
            - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action:
                  - 'sts:AssumeRole'
          Path: /         
          Policies:
            - PolicyName: policy-sts-all
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - sts:AssumeRole
                    Resource: "*"
                  - Effect: Allow
                    Action:
                      - sqs:DeleteMessage
                      - sqs:ReceiveMessage
                      - sqs:SendMessage
                      - sqs:GetQueueAttributes
                    Resource: !GetAtt SQSConfigRecorder.Arn   

    SQSConfigRecorder:
        Type: AWS::SQS::Queue
        DeletionPolicy: Retain
        Properties:
            #QueueName: ct_configrecorder_override_cf
            VisibilityTimeout: 180
            DelaySeconds: 5
            KmsMasterKeyId: alias/aws/sqs

    ProducerEventTrigger:
        Type: AWS::Events::Rule
        Properties: 
          Description: "Rule to trigger config recorder override producer lambda"
          EventBusName: default
          EventPattern: '{
                          "source": ["aws.controltower"],
                          "detail-type": ["AWS Service Event via CloudTrail"],
                          "detail": {
                            "eventName": ["UpdateLandingZone", "CreateManagedAccount", "UpdateManagedAccount"]
                          }
                        }'
          Name: !GetAtt SQSConfigRecorder.QueueName #ct_configrecorder_override_cf
          State: ENABLED
          Targets: 
            - 
                Arn: 
                  Fn::GetAtt: 
                    - "ProducerLambda"
                    - "Arn"
                Id: "ProducerTarget"

    ProducerLambdaTrigger:
      Type: 'Custom::ExecuteLambda'
      Properties:
        ServiceToken: !GetAtt "ProducerLambda.Arn"
        FunctionName: !Ref ProducerLambda
        Version: !Ref CloudFormationVersion

##################################################
#to add the SNSSubscription on the audit account for an SNS topic created by Control Tower
##################################################

  SNSSubscriptionLambda:
    Type: AWS::Lambda::Function
    DeletionPolicy: Retain
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: ct-config-content/SNSSubscription.zip
      Handler: SNSSubscription.lambda_handler
      Role: !GetAtt SNSSubscriptionLambdaExecutionRole.Arn
      Runtime: python3.10
      MemorySize: 128
      Timeout: 300
      Architectures:
        - x86_64
      ReservedConcurrentExecutions: 1

  SNSSubscriptionLambdaPermissions:
    Type: AWS::Lambda::Permission
    DeletionPolicy: Retain
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref SNSSubscriptionLambda
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt SNSSubscriptionEventTrigger.Arn

  SNSSubscriptionLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    DeletionPolicy: Retain
    Properties:
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ct_sns_SNSSubscription
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:ListStackInstances
                Resource: '*'

  SNSSubscriptionEventTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: "Rule to trigger config recorder override SNSSubscription lambda"
      EventBusName: default
      EventPattern: '{
                      "source": ["aws.controltower"],
                      "detail-type": ["AWS Service Event via CloudTrail"],
                      "detail": {
                        "eventName": ["UpdateLandingZone", "CreateManagedAccount", "UpdateManagedAccount"]
                      }
                    }'
      Name: !GetAtt SNSSubscriptionLambda.FunctionName
      State: ENABLED
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "SNSSubscriptionLambda"
              - "Arn"
          Id: "SNSSubscriptionTarget"

  SNSSubscriptionLambdaTrigger:
    Type: 'Custom::ExecuteLambda'
    Properties:
      ServiceToken: !GetAtt "SNSSubscriptionLambda.Arn"
      FunctionName: !Ref SNSSubscriptionLambda
      Version: !Ref CloudFormationVersion
